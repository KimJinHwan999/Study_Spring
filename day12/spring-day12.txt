1. 임베디드 타입 (복합 값 타입)
	- 내장 타입
	- 새로운 값 타입을 직접 정의할 수 있음
	- JPA는 임베디드 타입(embedded type) 이라고 함
	- 주로 기본값 타입을 모아 만들어서 복합값 타입이라고도 함
	- int, String 과 같은 값 타입

2. JPA에서 임베디드 타입 사용법
	- @Embeddable : 값 타입을 정의하는 곳에 표시
	- @Embedded	: 값 타입을 사용하는 곳에 표시
	- 기본 생성자 필수

3. 임베디드 타입의 장점
	- 재사용
	- 높은 응집도
	- 객체지향적인 설계 가능하다

4. 임베디드 타입과 테이블 매핑
	- 임베디드 타입은 엔티티의 값일 뿐이다.
	- 임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다.
	- 잘 설계된 애플리케이션은 매핑한 테이블의 수 보다 클래스의 수가 더 많음

5. @AttributeOverride : 속성 재정의
	- 한 엔티티에서 같은 값 타입을 사용하면 -> 컬럼명이 중복됨
	- @Attributeoverrides, @AttributeOverride를 사용해서 컬럼 명 속성을 재정의

6. 불변객체
	- 객체 타입을 수정할 수 없게 만들면 부작용을 원천 차단
	- 값 타입은 불변 객체로 설계해야 함
	- 생성 시점 이후 절대 값을 변경할 수 없는 객체
	- 생성자로만 값을 설정하고 수정자(setter)를 만들지 않으면 됨

7. 객체지향 쿼리 언어(JPQL)
 	- JPA는 다양한 쿼리 방법을 지원
	- JPQL : 권장, 실무사용, 거의 모든 문제 해결 가능
	- JPA Criteria : 비추하는 방법 (자바 코드를 짜서 JPA를 빌드해주는 generator 모음)
	- QueryDSL : 권장, 실무사용. 
	- 네이티브 SQL : connect by...
	- JDBC API : MyBatis, SpringJDBCTemplate

8. JPQL
 	- JPA를 사용하면 엔티티 객체를 중심으로 개발
	- 문제는 검색 쿼리
	- 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색
	- JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어 제공
	- SQL과 문법 유사, select, from, where, group by, having, join... 지원
	- JPQL은 엔티티 객체를 대상으로 쿼리 작성
	- SQL은 데이터베이스 테이블을 대상으로 쿼리
	- Java Persistence Query Language	
	- SQL을 추상화해서 특정 데이터베이스에 의존하지 않음
	- JPA는 JPQL을 분석 후, 적절한 SQL을 만들어 데이터베이스를 조회

9. 규칙
	- 엔티티 이름
		-> 테이블 명 대신 엔티티명을 사용, @Entity(name="")으로 사용 가능
		-> 지정하지 않을 시 클래스 명을 기본 값으로 사용(추천)
	- 별칭은 필수
		-> JPQL은 별칭을 필수
		-> AS는 생략 가능

10. JPQL 문법
	- select
			select절	항목
			from절	
			where절
			group by절
			having절
			order by절
	- update
			update절
			where절

	- delete
			delete절
			where절
			
11. 함수
	- count(m)	// 회원 수
	- sum(m.age)	// 나이의 합
	- avg(m.age)	// 평균 나이
	- max(m.age)	// 최대 나이
	- min(m.age)	// 최소 나이

12. TypedQuery, Query
	- TypedQuery : 반환 타입이 명확할 때 사용

	TypedQuery<Member> query = 
		("select m from member m", Member.class)

	TypedQuery<String> query = 
		("select m.username from member m", String.class)

	- Query : 반환 타입이 명확하지 않을 때 사용
	
	Query query = // String과 int 같이 받아옴
		("select m.username, m.age from member m") 

13. 결과조회 API
	- query.getResultList()
	: 결과가 없으면 빈 리스트 반환
	: 빈 collection이 반환되기 때문에 nullPointerException에 대한 걱정은 안 해도 된다.

	- query.getSingleResult()
	: 결과가 정확히 하나(조심), 단일 객체 반환
	: 결과가 없을 경우	-> NoResultException
	: 결과가 둘 이상이면	-> NonUniqueResultException

14. 파라미터 바인딩 - 이름 기준, 위치
	14-1. 이름 기준
		select m from Member m where m.username = :username
		query.setParameter("username", usernameParam);
	
	14-2. 위치 기준 (권장하지 않음)
		select m from Member m where m.username = ?1
		query.setParameter(1, usernameParam);
		















